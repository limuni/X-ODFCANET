import torch
import torch.nn as nn
from torch.nn import init
import warnings
from CA import CoordAtt
from od import ODConv2d as ODConv2d




def odconv3x3(in_planes, out_planes, stride=1,reduction=0.0625, kernel_num=3):
    "3x3 convolution with padding"
    return ODConv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=1, reduction=reduction, kernel_num=kernel_num)

def odconv1x1(in_planes, out_planes, stride=1, reduction=0.0625, kernel_num=3):
    return ODConv2d(in_planes, out_planes, kernel_size=1, stride=stride, padding=0,
                    reduction=reduction, kernel_num=kernel_num)



class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None, use_ca=True,reduction=0.0625, kernel_num=3):
        super(BasicBlock, self).__init__()
        self.conv1 = odconv3x3(inplanes, planes, stride,reduction=reduction, kernel_num=kernel_num)
        self.bn1 = nn.BatchNorm2d(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = odconv3x3(planes, planes,reduction=reduction, kernel_num=kernel_num)
        self.bn2 = nn.BatchNorm2d(planes)
        self.downsample = downsample
        self.stride = stride

        if use_ca:
            self.ca = CoordAtt(planes, planes)
        else:
            self.ca = None

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        if not self.ca is None:
            out = self.ca(out)

        out += residual
        out = self.relu(out)

        return out


class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None, use_ca=True, reduction=0.0625, kernel_num=3):
        super(Bottleneck, self).__init__()
        self.conv1 = odconv1x1(inplanes, planes, reduction=reduction, kernel_num=kernel_num)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = odconv3x3(planes, planes, stride, reduction=reduction, kernel_num=kernel_num)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = odconv1x1(planes, planes * self.expansion, reduction=reduction, kernel_num=kernel_num)
        self.bn3 = nn.BatchNorm2d(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

        if use_ca:
            self.ca = CoordAtt(planes * 4, planes * 4)
        else:
            self.ca = None

    def forward(self, x):
        residual = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            residual = self.downsample(x)

        if not self.ca is None:
            out = self.ca(out)

        out += residual
        out = self.relu(out)

        return out


class OD_CA_ResNet(nn.Module):
    def __init__(self, block, layers, num_classes, att_type='CA', reduction=0.0625, kernel_num=3):
        self.inplanes = 64
        super(OD_CA_ResNet, self).__init__()

        self.conv1 = nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.avgpool = nn.AvgPool2d(7)

        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)

        if att_type == 'CA':
            self.ca1 = CoordAtt(64 * block.expansion, 64 * block.expansion)
            self.ca2 = CoordAtt(128 * block.expansion,  128 * block.expansion)
            self.ca3 = CoordAtt(256 * block.expansion,  256 * block.expansion)
            print()
        else:
            self.ca1,self.ca2,self.ca3= None,None,None

        self.layer1 = self._make_layer(block, 64, layers[0], reduction=reduction, kernel_num=kernel_num,att_type=att_type)
        #self.cbam1  = CBAM(64 * block.expansion)
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2, reduction=reduction, kernel_num=kernel_num, att_type=att_type)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2, reduction=reduction, kernel_num=kernel_num,att_type=att_type)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2, reduction=reduction, kernel_num=kernel_num,att_type=att_type)

        self.fc = nn.Linear(512 * block.expansion, num_classes)

        init.kaiming_normal(self.fc.weight)


    def _make_layer(self, block, planes, blocks, stride=1, reduction=0.0625, kernel_num=3, att_type='CA'):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                nn.Conv2d(self.inplanes, planes * block.expansion,
                          kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, reduction=reduction, kernel_num=kernel_num,use_ca=att_type == 'CA'))
        self.inplanes = planes * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.inplanes, planes,reduction=reduction, kernel_num=kernel_num, use_ca=att_type == 'CA'))

        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)

        x = self.maxpool(x)

        x = self.layer1(x)
        if not self.ca1 is None:
            x = self.ca1(x)

        x = self.layer2(x)
        if not self.ca2 is None:
            x = self.ca2(x)

        x = self.layer3(x)
        if not self.ca3 is None:
            x = self.ca3(x)

        x = self.layer4(x)


        x = self.avgpool(x)

        x = x.view(x.size(0), -1)
        "x = torch.flatten(x, 1)"
        "x.view(-1, 7 * 7 * 512)"
        x = self.fc(x)
        return x



